package com.example.andenk.schichtln.gui

import android.content.Context
import android.content.DialogInterface
import android.os.Bundle
import android.support.v4.app.Fragment
import android.support.v4.widget.SwipeRefreshLayout
import android.view.LayoutInflater
import android.view.View
import android.view.View.GONE
import android.view.View.VISIBLE
import android.view.ViewGroup
import android.widget.ArrayAdapter
import android.widget.ListView
import android.widget.Toast
import com.android.volley.Response
import com.example.andenk.schichtln.R
import com.example.andenk.schichtln.helper.DBHelper
import com.example.andenk.schichtln.helper.Helper
import com.example.andenk.schichtln.pojos.Schicht
import com.example.andenk.schichtln.pojos.User
import com.example.andenk.schichtln.webservice.WebService
import com.google.gson.Gson
import kotlinx.android.synthetic.main.display_user_list.view.*
import kotlinx.android.synthetic.main.fragment_personal_list.*
import kotlinx.android.synthetic.main.fragment_personal_list.view.*
import org.json.JSONArray
import org.json.JSONObject
import java.text.SimpleDateFormat
import java.util.*
import kotlin.collections.ArrayList


/**
 * A simple [Fragment] subclass.
 * Activities that contain this fragment must implement the
 * [PersonalFragment.OnFragmentInteractionListener] interface
 * to handle interaction events.
 * Use the [PersonalFragment.newInstance] factory method to
 * create an instance of this fragment.
 */
class PersonalFragment : Fragment() {
    var userlistview: ListView? = null
    var openlistview: ListView? = null
    var swipePersonal: SwipeRefreshLayout? = null
    var swipeOpen: SwipeRefreshLayout? = null
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
    }

    override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?,
                              savedInstanceState: Bundle?): View? {
        // Inflate the layout for this fragment

        var view: View = inflater!!.inflate(R.layout.fragment_personal_list, container, false)
        userlistview = view.list_user_days
        openlistview = view.list_open_days
        swipeOpen = view.swipe_open
        swipePersonal = view.swipe_personal

        swipeOpen!!.setColorScheme(R.color.colorAccent, R.color.colorPrimary, R.color.colorPrimaryDark)
        swipePersonal!!.setColorScheme(R.color.colorAccent, R.color.colorPrimary, R.color.colorPrimaryDark)

        swipePersonal!!.setOnRefreshListener({

            updatePersonal()
        })

        swipeOpen!!.setOnRefreshListener({
            updateOpen()
        })


        updatePersonal()
        updateOpen()



        return view
    }

    val gson = Gson()
    fun updateOpen() {


        var list: ArrayList<Schicht> = ArrayList()

        getOpenSchichten(Response.Listener {
            var i = 0
            var jsonArray: JSONArray = it as JSONArray
            print(jsonArray)
            while (i < jsonArray.length()) {
                var schicht = gson.fromJson(jsonArray.get(i).toString(), Schicht::class.java)
                list.add(schicht)
                i++
            }
            openlistview?.adapter = OpenListAdapter(activity, list)
            swipeOpen!!.isRefreshing = false
        },
                Response.ErrorListener {
                    println(it.message)
                    swipeOpen!!.isRefreshing = false
                })


    }

    fun updatePersonal() {


        var list: ArrayList<Schicht> = ArrayList()

        getSchichtenByUser(Response.Listener {
            var i = 0
            var jsonArray: JSONArray = it as JSONArray
            print(jsonArray)
            while (i < jsonArray.length()) {
                var schicht = gson.fromJson(jsonArray.get(i).toString(), Schicht::class.java)
                list.add(schicht)
                i++
            }
            userlistview?.adapter = UserListAdapter(activity, list)
            swipePersonal!!.isRefreshing = false
        },
                Response.ErrorListener {
                    println(it.message)
                    swipePersonal!!.isRefreshing = false
                })


    }


    inner class UserListAdapter(context: Context?,
                                objects: MutableList<Schicht>?) : ArrayAdapter<Schicht>(context, 0, objects) {


        var objects: MutableList<Schicht>? = objects
        var vi: LayoutInflater = context!!.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater


        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View? {
            var retView: View
            var item: Schicht = objects!!.get(position)
            if (convertView == null) {
                retView = vi.inflate(R.layout.display_user_list, null)


                if (item.dut_note.isBlank()) {
                    retView.txt_popup_note.visibility = GONE
                }
                retView.txt_popup_note.text = item.dut_note
                if (item.a_id == 1) {


                    retView.txt_popup_message.text = "diese Schicht..."

                    retView.txt_popup_option3.text = "offen anbieten"

                    retView.txt_popup_option2.text = "jemandem anbieten"

                    retView.txt_popup_option2.setOnClickListener({

                        offer(item)
                    }
                    )

                    if (item.offered_to != null) {
                        retView.txt_popup_note_bottom.visibility = VISIBLE
                        retView.txt_popup_note_bottom.text = "Du hast diese Schicht ${item.offered_to} angeboten"
                    }



                    retView.txt_popup_option2.visibility = VISIBLE
                    retView.txt_popup_option3.visibility = VISIBLE

                    retView.txt_popup_option3.setOnClickListener({ l ->
                        var helper = Helper()
                        helper.createAlert(activity,
                                "Willst du diese Schicht allen anderen anbieten? " +
                                        "\nDu bleibst solange für diese Schicht verantwortlich, bis ein Anderer sie annimmt",
                                DialogInterface.OnClickListener({ dialogInterface: DialogInterface, i: Int -> setSchichtOpen(item) })).show()


                    })
                } else {
                    if (item.a_id == 2) {
                        retView.txt_popup_message.text = "diese Schicht wurde geändert"
                        retView.txt_popup_option3.setOnClickListener({ l ->
                            setSchichtAccepted(item)
                        })

                    }
                    if (item.a_id == 4) {
                        retView.txt_popup_message.text = "diese Schicht wurde gestrichen"
                        retView.txt_popup_option3.setOnClickListener({ l ->
                            deleteSchicht(item)

                        })
                    }
                    retView.txt_popup_option3.text = "akzeptieren"
                    retView.txt_popup_option3.visibility = VISIBLE


                }
                retView.btn_more.setOnClickListener({ view ->
                    if (retView.container_schicht.visibility == VISIBLE) {
                        retView.container_schicht.visibility = GONE
                        retView.container_popup.visibility = VISIBLE
                    } else if (retView.container_popup.visibility == VISIBLE) {
                        retView.container_schicht.visibility = VISIBLE
                        retView.container_popup.visibility = GONE

                    }

                })

                retView.display_userlist_tv2!!.text = item.description

                var sdf = SimpleDateFormat("EE dd.MM.yy")

                var date = Date(item.date)
                retView.display_userlist_tv1!!.text = sdf.format(date)
                if (item.dut_note != null && item.dut_note.length > 9) {
                    retView.display_userlist_tv3.text = item.dut_note.substring(0, 9) + "..."
                } else {
                    retView.display_userlist_tv3.text = item.dut_note
                }
                retView.acc_dot.setImageResource(activity.getResources().getIdentifier(
                        item.color, "drawable", activity.getPackageName())); } else {
                retView = convertView
            }





            return retView
        }


    }

    private fun offer(item: Schicht) {
        var helper = Helper()
        var userList = ArrayList<Any>()
        getUserByP_Id(item.p_id, Response.Listener {

            var i = 0
            var jsonArray: JSONArray = it as JSONArray
            print(jsonArray)
            while (i < jsonArray.length()) {
                var schicht = gson.fromJson(jsonArray.get(i).toString(), User::class.java)
                userList.add(schicht)
                i++
            }

            helper.createAlert(activity,
                    "",
                    userList,
                    DialogInterface.OnClickListener(
                            { dialogInterface: DialogInterface,
                              i_alert_list: Int ->
                                helper.createAlert(activity,
                                        "Die Schicht bleibt solange unter deiner" +
                                                " Verantwortung bis ${(userList.get(i_alert_list) as User).nickname} diese " +
                                                "Schicht annimmt.",
                                        DialogInterface.OnClickListener(
                                                { d: DialogInterface, i_alert ->

                                                    offerSchichtTo(
                                                            item,
                                                            userList.get(i_alert_list) as User,
                                                            Response.Listener {
                                                                Toast.makeText(
                                                                        activity,
                                                                        "${(userList.get(i_alert_list) as User).nickname} wird benachrichtigt",
                                                                        Toast.LENGTH_SHORT).show()
                                                                updatePersonal()
                                                                updateOpen()
                                                            }, Response.ErrorListener {
                                                        Toast.makeText(
                                                                activity,
                                                                "$it",
                                                                Toast.LENGTH_SHORT).show()

                                                    }
                                                    )


                                                }
                                        )


                                ).create().show()


                            }
                    )
            ).create().show()

        }, Response.ErrorListener { }
        )
    }

    private fun setSchichtOpen(item: Schicht) {
        var ws = WebService()

        ws.setSchichtOpen(activity, item, Response.Listener {
            updateOpen()
            updatePersonal()
        }, Response.ErrorListener {
            Toast.makeText(activity, "$it", Toast.LENGTH_SHORT).show()
        })
    }

    private fun setSchichtAccepted(item: Schicht) {
        var ws = WebService()

        ws.setSchichtAccepted(activity, item, Response.Listener {
            updateOpen()
            updatePersonal()
        }, Response.ErrorListener {
            Toast.makeText(activity, "$it", Toast.LENGTH_SHORT).show()
        })
    }

    private fun deleteSchicht(item: Schicht) {
        var ws = WebService()

        ws.deleteSchicht(activity, item, Response.Listener {
            updateOpen()
            updatePersonal()
        }, Response.ErrorListener {
            Toast.makeText(activity, "$it", Toast.LENGTH_SHORT).show()
        })
    }


    private fun setSchichtTakenByUser(item: Schicht) {
        var ws = WebService()
        var db = DBHelper(activity)
        ws.setSchichtTakenByUser(activity, item, db.getCurrentUser()!!, Response.Listener {
            updateOpen()
            updatePersonal()
        }, Response.ErrorListener {
            Toast.makeText(activity, "$it", Toast.LENGTH_SHORT).show()
        })
    }

    inner class OpenListAdapter(context: Context?,
                                objects: MutableList<Schicht>?
    ) : ArrayAdapter<Schicht>(context, 0, objects) {


        var objects: MutableList<Schicht>? = objects
        var vi: LayoutInflater = context!!.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater


        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View? {
            var retView: View
            var item: Schicht = objects!!.get(position)
            if (convertView == null) {
                retView = vi.inflate(R.layout.display_user_list, null)
                retView.btn_more.setOnClickListener({ view ->
                    if (retView.container_schicht.visibility == VISIBLE) {
                        retView.container_schicht.visibility = GONE
                        retView.container_popup.visibility = VISIBLE
                    } else if (retView.container_popup.visibility == VISIBLE) {
                        retView.container_schicht.visibility = VISIBLE
                        retView.container_popup.visibility = GONE

                    }

                })


                retView.display_userlist_tv2.text = item.description


                if (item.dut_note == null) {
                    retView.txt_popup_note.visibility = GONE
                } else {
                    retView.txt_popup_note.text = "${item.dut_note}"
                }


                retView.txt_popup_message.text = "möchtest du diese Schicht annehmen?"

                retView.txt_popup_option3.text = "ja"

                retView.txt_popup_option3.visibility = VISIBLE

                retView.txt_popup_option3.setOnClickListener({ l ->
                    setSchichtTakenByUser(item)

                })

                var sdf = SimpleDateFormat("EE dd.MM.yy")

                var date = Date(item.date)
                retView.display_userlist_tv1!!.text = sdf.format(date)

                if (item.dut_note != null && item.dut_note.length > 9) {
                    retView.display_userlist_tv3.text = item.dut_note.substring(0, 9) + "..."
                } else {
                    retView.display_userlist_tv3.text = item.dut_note
                }
                retView.acc_dot!!.setImageResource(activity.getResources().getIdentifier(item.color, "drawable", activity.getPackageName()));

            } else {
                retView = convertView
            }




            return retView
        }


    }

    private fun getOpenSchichten(listener: Response.Listener<JSONArray>, errorListener: Response.ErrorListener) {

        val ws = WebService()
        var db = DBHelper(activity)
        ws.getOpenSchichtByUser(activity, db.getCurrentUser()!!, listener, errorListener)
    }

    private fun getSchichtenByUser(listener: Response.Listener<JSONArray>, errorListener: Response.ErrorListener) {

        val ws = WebService()
        var db = DBHelper(activity)


        ws.getAllSchichtByUser(activity, db.getCurrentUser()!!, listener, errorListener)
    }

    private fun getUserByP_Id(p_id: Int, listener: Response.Listener<JSONArray>, errorListener: Response.ErrorListener) {

        val ws = WebService()

        ws.getUsersByP_Id(activity, p_id, listener, errorListener)
    }

    private fun offerSchichtTo(schicht: Schicht, user: User, listener: Response.Listener<JSONObject>, errorListener: Response.ErrorListener) {

        val ws = WebService()

        ws.offerSchichtToUser(activity, schicht, user, listener, errorListener)
    }

}
