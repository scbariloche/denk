package com.example.andenk.schichtln.gui

import android.app.Activity
import android.content.Context
import android.os.Bundle
import android.os.StrictMode
import android.support.v4.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ArrayAdapter
import android.widget.CalendarView
import com.android.volley.Response
import com.example.andenk.schichtln.R
import com.example.andenk.schichtln.pojos.Schicht
import com.example.andenk.schichtln.webservice.WebService
import com.google.gson.Gson
import kotlinx.android.synthetic.main.display_user_list.view.*
import kotlinx.android.synthetic.main.fragment_calendar.view.*
import org.json.JSONArray
import java.util.*
import kotlin.collections.ArrayList


/**
 * A simple [Fragment] subclass.
 * Activities that contain this fragment must implement the
 * [CalendarFragment.OnFragmentInteractionListener] interface
 * to handle interaction events.
 * Use the [CalendarFragment.newInstance] factory method to
 * create an instance of this fragment.
 */
class CalendarFragment : Fragment() {

    var cal: Calendar = Calendar.getInstance()
    var ret: View? = null
    val gson = Gson()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val SDK_INT = android.os.Build.VERSION.SDK_INT
        if (SDK_INT > 8) {
            val policy = StrictMode.ThreadPolicy.Builder()
                    .permitAll().build()
            StrictMode.setThreadPolicy(policy)

        }
    }

    override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?,
                              savedInstanceState: Bundle?): View? {
        // Inflate the layout for this fragment


        ret = inflater!!.inflate(R.layout.fragment_calendar, container, false)

        ret!!.calendarView.setOnDateChangeListener(MOnDateChangeListener())



        ret!!.toggle_list_up_down.setOnClickListener(ToggleUpDownListener())
        cal = Calendar.getInstance()
        ret!!.calendarView.date = cal.timeInMillis
        updateList(cal.timeInMillis)
        return ret
    }

    override fun onResume() {
        super.onResume()
//        updateList(cal.timeInMillis)
    }

    fun updateList(millis: Long): Unit {

        var list: ArrayList<Schicht> = ArrayList()

        getSchichtenByDay(millis, Response.Listener {
            var i = 0
            var jsonArray: JSONArray = it as JSONArray
            print(jsonArray)
            while (i < jsonArray.length()) {
                var schicht = gson.fromJson(jsonArray.get(i).toString(), Schicht::class.java)
                list.add(schicht)
                i++
            }
            println(ret)
            ret!!.listview_details.adapter = DetailListAdapter(activity, list)
        },
                Response.ErrorListener {
                    println(it.message)
                })


    }

    inner class MOnDateChangeListener : CalendarView.OnDateChangeListener {
        /**
         * Called upon change of the selected day.
         *
         * @param view The view associated with this listener.
         * @param year The year that was set.
         * @param month The month that was set [0-11].
         * @param dayOfMonth The day of the month that was set.
         */
        override fun onSelectedDayChange(view: CalendarView?, year: Int, month: Int, dayOfMonth: Int) {

            cal.set(year, month, dayOfMonth)
           var millis= cal.timeInMillis
            updateList(millis)

        }
    }

    inner class ToggleUpDownListener : View.OnClickListener {
        /**
         * Called when a view has been clicked.
         *
         * @param v The view that was clicked.
         */
        override fun onClick(v: View?) {
            if (ret!!.calendarView.visibility == View.GONE) {
                ret!!.calendarView.visibility = View.VISIBLE
            } else {
                ret!!.calendarView.visibility = View.GONE
            }


        }
    }

    inner class DetailListAdapter(context: Context?,
                                  objects: MutableList<Schicht>?) : ArrayAdapter<Schicht>(
            context, 0, objects) {


        var objects: MutableList<Schicht>? = objects
        var context: Activity = context as Activity
        var vi: LayoutInflater = context!!.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater


        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View? {
            var retView: View
            var item: Schicht = objects!!.get(position)
            if (convertView == null) {
                retView = vi.inflate(R.layout.display_user_list, null)

                retView.display_userlist_tv1!!.text = item.nickname
                retView.display_userlist_tv2!!.text = item.description

                retView.acc_dot!!.setImageResource(activity.getResources().getIdentifier(item.color, "drawable", activity.getPackageName()));
            } else {
                retView = convertView
            }
            return retView
        }


    }


    private fun getSchichtenByDay(millis: Long, listener: Response.Listener<JSONArray>, errorListener: Response.ErrorListener) {

        val ws = WebService()

         ws.getAllSchichtByDay(activity, millis, listener, errorListener)
    }

}
